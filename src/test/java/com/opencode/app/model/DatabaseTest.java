/*
 * Copyright (C) 2017 Open Code.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "as is" basis,
 * without warranties or conditions of any kind, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.opencode.app.model;

import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;
import static org.junit.Assert.*;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;

/**
 * Класс представляет собой модульный тест
 * для тестирования методов класса {@link Database}.
 *
 * @version 1.0
 * @author Vladimir Kizelbashev
 */
public class DatabaseTest {

    private static String dbDriver;     // имя класса JDBC-драйвера
    private static String dbUrl;        // строка подключения к базе данных
    private static String dbUserName;   // имя пользователя базы данных
    private static String dbPassword;   // пароль пользователя базы данных
    private static Database db;         // объект для работы с базой данных

    /**
     * Метод инициализирует тестовую базу данных перед вызовом тестовых методов.
     * Вызывается один раз при запуске теста.
     * @throws Exception
     */
    @BeforeClass
    public static void setUp() throws Exception {
        dbDriver = "org.hsqldb.jdbc.JDBCDriver";
        // директория %userprofile%\bulls-cows\db\testdb
        dbUrl = "jdbc:hsqldb:file:~/bulls-cows/db/testdb";
        dbUserName = "sa";
        dbPassword = "";
        db = new Database();
        db.init(dbUrl, dbUserName, dbPassword);

        // Загрузка класса JDBC-драйвера
        Class.forName(dbDriver);

        // Подключение к базе данных
        try (Connection conn = DriverManager.getConnection(dbUrl, dbUserName, dbPassword);
             Statement st = conn.createStatement()) {

            // Создание таблицы "Пользователи"
            st.execute("CREATE TABLE IF NOT EXISTS users (" +
                    "id BIGINT GENERATED BY DEFAULT AS IDENTITY " +
                    "(START WITH 1, INCREMENT BY 1) NOT NULL PRIMARY KEY, " +
                    "first_name NVARCHAR(32) NOT NULL, " +          // имя
                    "last_name NVARCHAR(32) NOT NULL, " +           // фамилия
                    "user_name NVARCHAR(32) NOT NULL UNIQUE, " +    // имя пользователя
                    "password NVARCHAR(32) NOT NULL);");            // хеш пароля

            // Создание таблицы "Игры"
            st.execute("CREATE TABLE IF NOT EXISTS games (" +
                    "id BIGINT GENERATED BY DEFAULT AS IDENTITY " +
                    "(START WITH 1, INCREMENT BY 1) NOT NULL PRIMARY KEY, " +
                    "user_id BIGINT NOT NULL, " +                   // ID пользователя
                    "attempts INT NOT NULL, " +                     // количество попыток до угадывания числа
                    "CONSTRAINT fk_user_game FOREIGN KEY (user_id) REFERENCES users(id));");

            // Вставка тестовых записей
            try {
                // Пользователь (имя пользователя = "user", пароль = "user")
                st.execute("INSERT INTO users (id, first_name, last_name, user_name, password) " +
                           "VALUES (1, 'Name', 'Surname', 'user', 'ee11cbb19052e40b07aac0ca060c23ee');");
                // Игры
                st.execute("INSERT INTO games (id, user_id, attempts) VALUES (1, 1, 8);");
                st.execute("INSERT INTO games (id, user_id, attempts) VALUES (2, 1, 10);");
                st.execute("INSERT INTO games (id, user_id, attempts) VALUES (3, 1, 12);");
            } catch (SQLException ex) {
                throw new SQLException("The record already exists");
            }
        }
    }

    /**
     * Метод очищает тестовую базу данных.
     * Он вызывается после выполнения всех тестовых методов.
     * @throws Exception
     */
    @AfterClass
    public static void tearDown() throws Exception {
        try (Connection conn = DriverManager.getConnection(dbUrl, dbUserName, dbPassword);
             Statement st = conn.createStatement()) {
            st.executeUpdate("DROP TABLE IF EXISTS games;");
            st.executeUpdate("DROP TABLE IF EXISTS users;");
        } catch (SQLException ex) {
            throw ex;
        }
        db = null;
    }

    /**
     * Метод тестирует авторизацию пользователя.
     * @throws Exception
     */
    @Test
    public void testLogin() throws Exception {
        String userName = "user";
        String password = "user";
        User user = db.login(userName, password);
        assertNotNull("User must be not null", user);
    }

    /**
     * Метод тестирует регистрацию нового пользователя.
     * @throws Exception
     */
    @Test
    public void testRegister() throws Exception {
        User user = new User();
        user.setFirstName("Keanu");
        user.setLastName("Reeves");
        user.setUserName("neo");
        user.setPassword("neo");
        user = db.register(user);
        assertNotNull("User must be not null", user);
        assertNotNull("Id must be not null", user.getId());
    }

    /**
     * Метод тестирует получение рейтинга пользователей.
     * @throws Exception
     */
    @Test
    public void testGetRating() throws Exception {
        List<RatingItem> rating = db.getRating();
        assertNotNull("Rating list must be not null", rating);
    }

    /**
     * Метод тестирует сохранение данных завершённой пользователем игры.
     * @throws Exception
     */
    @Test
    public void testAddGame() throws Exception {
        String userName = "user";
        String password = "user";
        User user = db.login(userName, password);
        if (user != null) {
            try {
                int attempts = 10;
                db.addGame(user, attempts);
            } catch (Exception ex) {
                fail("An exception occured: " + ex.getMessage());
            }
        }
    }
}
